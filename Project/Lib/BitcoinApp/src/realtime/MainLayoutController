package realtime;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class MainLayoutController {

    @FXML
    LineChart<String, Number> chart;
    @FXML
    Button updateBtn;

    XYChart.Series<String, Number> series;

    @FXML
    public void initialize(){
        chart.setTitle("Bitcoin current price: " + getBitcoinPrice());

        series = new XYChart.Series<String, Number>();
        series.setName("WinkDex");

        StringBuffer text = new StringBuffer();
        Date date = null;
        Double price;
        try {
            URL blockchain = new URL("https://blockchain.info/ticker");
            HttpURLConnection connection = (HttpURLConnection) blockchain.openConnection();
            connection.setRequestMethod("GET");
//          connection.setRequestProperty("Accept-Encoding", "gzip"); // we will avoid encoding for our tutorial because decompressing will complicate things
            connection.setRequestProperty("User-Agent", "breekmd.wordpress.com-tutorial");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            String inputLine;
            while ((inputLine = reader.readLine()) != null ) {
                JSONArray a = (JSONArray) parser.parse
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (ProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        JsonParserFactory factory = JsonParserFactory.getInstance();
        JSONParser parser = factory.newJsonParser();
        Map data = parser.parseJson(text.toString());
        List list = (List) data.get("series");
        List results = (List) ((Map) list.get(0)).get("results");
        for (Object object : results) {
            Map result = (Map) object;
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss-SS:SS");
            try {
                date = df.parse((String) result.get("timestamp"));
            } catch (ParseException e) {
                e.printStackTrace();
            }
            DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
            DecimalFormat decimalFormat = new DecimalFormat("#.##");
            price = Double.parseDouble((String) result.get("price"));
            series.getData().add(new XYChart.Data<String, Number>(dateFormat.format(date), price/100));
        }
        ObservableList<XYChart.Series<String, Number>> fxlist = FXCollections.observableArrayList(series);
        chart.setData(fxlist);
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {

            @Override
            public void run() {
                Platform.runLater(new Runnable() {

                    @Override
                    public void run() {
                        updateBitcoinPrice();
                    }
                });
            }
        }, 60000, 60000); // 60 seconds
    }

    public void update() {
        chart.getData().clear();
        chart.setTitle("Bitcoin current price: " + getBitcoinPrice());
        StringBuffer text = new StringBuffer();
        Date date = null;
        Double price;
        try {
            URL url = new URL("https://winkdex.com/api/v0/series");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
//          connection.setRequestProperty("Accept-Encoding", "gzip"); // we will avoid encoding for our tutorial because decompressing will complicate things
            connection.setRequestProperty("User-Agent", "breekmd.wordpress.com-tutorial");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null ) {
                text.append(line);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (ProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        JsonParserFactory factory = JsonParserFactory.getInstance();
        JSONParser parser = factory.newJsonParser();
        Map data = parser.parseJson(text.toString());
        List list = (List) data.get("series");
        List results = (List) ((Map) list.get(0)).get("results");
        for (Object object : results) {
            Map result = (Map) object;
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss-SS:SS");
            try {
                date = df.parse((String) result.get("timestamp"));
            } catch (ParseException e) {
                e.printStackTrace();
            }
            DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
            DecimalFormat decimalFormat = new DecimalFormat("#.##");
            price = Double.parseDouble((String) result.get("price"));
            series.getData().add(new XYChart.Data<String, Number>(dateFormat.format(date), price/100));
        }
        ObservableList<XYChart.Series<String, Number>> fxlist = FXCollections.observableArrayList(series);
        chart.setData(fxlist);

    }

    public void updateBitcoinPrice(){
        chart.setTitle("Bitcoin current price: " + getBitcoinPrice());
    }

    private String getBitcoinPrice() {
        StringBuffer text = new StringBuffer();
        Date date = null;
        Double price;
        try {
            URL url = new URL("https://winkdex.com/api/v0/price");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
//          connection.setRequestProperty("Accept-Encoding", "gzip"); // we will avoid encoding for our tutorial because decompressing will complicate things
            connection.setRequestProperty("User-Agent", "breekmd.wordpress.com-tutorial");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null ) {
                text.append(line);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (ProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        JsonParserFactory factory = JsonParserFactory.getInstance();
        JSONParser parser = factory.newJsonParser();
        Map map = parser.parseJson(text.toString());
        price = Double.parseDouble((String) map.get("price"))/100;
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        try {
            date = df.parse((String) map.get("timestamp"));
        } catch (ParseException e) {
            e.printStackTrace();
        }
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        return "$" + decimalFormat.format(price);
    }

}
